(0) We performed a SQL injection on the admin login page, putting “' or ' 1=1” for both username and password.
(1.1) the WEP key;(1.2) The flaw in WEP is the implementation of IVs. The IVs are too short and because of the amount of traffic usually present on wireless networks, there is bound to be a repeat. Thus, this breaks the rule of never reusing keys. An attacker can collect packets and use them and the fact that there will be an IV collision to decrypt the entire packet and obtain the WEP key.(1.3) We used Mac OS X built-in “Wireless Diagnostic” for the first two steps in this part. First, we used their “Scan” tool to scan for all of the local networks in the area; we saw that the network “pear-corp” was Channel 11 and had width 20 MHz. With this information, we were able to use their “Sniffer” tool to generate a .wcap file of packets intercepted on the network over a period of about two minutes. Finally, we input this file to aircrack-ng and it output the network key.
(2) maximum jail time for intercepting WiFi traffic without permission;
(3.1) We looked at our nmap output from the previous step and identified host 10.3.31.237 as the likely mail server based on the fact that it had smtp and smtps ports open. We then ran “telnet 10.3.31.237 25” to connect to the server and constructed an email by specifying the fields of the header. To obtain an authorization token, we knew we needed to send an email with the “RCPT TO” and “To” fields set to the support email (guessed to be support@pear.software), the “MAIL FROM” and “From” fields set to the CEO’s email (seen on WireShark as ceo@pear.software), and the “Reply-To” field set to our personal email address so that support would actually send the token to us when replying to the email that looked like it was from the CEO.(3.2) a brief discussion of countermeasures against this attack.(5) a brief discussion of countermeasures against brute-force password cracking;
(6.1) a brief explanation of what a code signing certificate is used for.(6.2) First, used password from Part 5 to log into the secure server as the CEO (username “ceo”). We did “SHOW-PASSWORDS” to get the username and password for the repo. Then we looked at the nmap to find ssh ports in an attempt to locate the repo; we tried to ssh into those hosts using the username we found before. The command that worked was “ssh -l git 10.3.31.243”. We entered the password from before and saw that there was a .git file called “pearOS.git”. We then cloned the git repo using “git clone git@10.3.31.243/pearOS.git”. Finally, following the instructions in the README, we were able to generate and sign our own certificate with their private signing key.
(6.3) a discussion of what you believe your correspondent will use the certificate for.(6.4) a brief discussion of countermeasures against this attack.(6.5) the maximum jail time you could face under 18~USC~\S~1030 for your actions